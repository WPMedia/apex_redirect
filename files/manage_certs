#! /usr/bin/env bash

mkdir -p /tmp/peers
export OUR_PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)

mute() { $@ >/dev/null 2>&1; }
report() { echo ${FUNCNAME[1]} $@ >&2; }

distribute_keys() {
    for pem in $(find /etc/letsencrypt/live -name '*.pem'); do
        domain=$(basename $(dirname $pem))
        keytype=$(basename $pem .pem)
   
        for ip in $(dig +short ${domain} A); do
            report Registering PEM ${domain}:${keytype} with $ip
            curl -s http://$ip/.well-known/acme-$keytype -H "Host: ${domain}" --data-binary @$pem
        done

        mv $pem $pem.loaded
    done
}

fetch_keys() {
    local domain=$1
    if [ -d /etc/letsencrypt/live/${domain} ]; then
        return
    fi

    mute mkdir -p /etc/letsencrypt/live/${domain}
    for keytype in fullchain privkey; do
        for ip in $(dig +short ${domain} A | grep -v ${OUR_PUBLIC_IP}); do
            touch /tmp/peers/${ip}
            if [ ! -f /etc/letsencrypt/live/${domain}/${keytype}.* ]; then
                report Asking ${ip} for ${domain}:${keytype}
                curl http://${ip}/.well-known/acme-${keytype} \
                    --silent --fail \
                    --header "Host: ${domain}" \
                    --output /etc/letsencrypt/live/${domain}/${keytype}.fetch

                # If curl reported error then delete the file
                #
                [ $? -ne 0 ] && mute rm /etc/letsencrypt/live/${domain}/${keytype}.fetch
            fi
        done

        if [ -f /etc/letsencrypt/live/${domain}/${keytype}.fetch ]; then
            pem=/etc/letsencrypt/live/${domain}/${keytype}.fetch
            report Uploading ${domain}/${keytype} locally

            curl --silent --fail http://$OUR_PUBLIC_IP/.well-known/acme-$keytype -H "Host: ${domain}" --data-binary @$pem
            if [ $? -ne 0 ]; then
                report Local upload failed ${domain}/${keytype}
                mute rm /etc/letsencrypt/live/${domain}/${keytype}.fetch

            else
                mv $pem $pem.loaded

            fi
        fi
    done
    mute rmdir /etc/letsencrypt/live/${domain}
}

new_cert() {
    if [ -z "$(dig +short @8.8.8.8 $1 A | grep ${OUR_PUBLIC_IP})" ]; then
        report Domain $1 does not map to our public IP address

    else
        # First try to fetch from peers
        #
        fetch_keys $1

        # If that was not successful, then go create new ones
        #
        if [ ! -d /etc/letsencrypt/live/$1 ]; then
            report Processing $domain
            certbot certonly \
                --test-cert \
                --register-unsafely-without-email \
                --manual-public-ip-logging-ok \
                --non-interactive \
                --no-redirect \
                --agree-tos \
                \
                --manual \
                --manual-auth-hook /acme_auth \
                \
                --domain $1
        fi
    fi
}


while sleep 5; do
    distribute_keys

    for entry in $(cat /tmp/http.log /tmp/https.log | sort -u | grep -v '^[-1-9]'); do
        domain=$(basename $entry .)
        new_cert $domain
    done

    for peer in $(ls /tmp/peers); do
        for domain in $(curl -s http://${peer}/.well-known/acme-domains); do
            fetch_keys $1
        done
    done
    distribute_keys
done
