log_format  name $http_host;

lua_shared_dict apex_tokens 1m;

server {
    listen      80 default_server;
    access_log  /tmp/http.log  name;

    location ~ ^/.well-known/acme-challenge/(.*)$ {
        default_type text/plain;
        set $apex_token $1;

        content_by_lua_block {
			local apex_tokens = ngx.shared.apex_tokens
            local reply = apex_tokens:get(ngx.var.apex_token)
            if (reply == nil or reply == '') then
                ngx.status=404
                ngx.exit(ngx.OK)
            else
                ngx.status=200
                ngx.say(reply)
                ngx.exit(ngx.OK)
            end
        }
    }

    location ~ ^/.set-well-known/acme-challenge/(.*)/(.*) {
        default_type text/plain;
        set $apex_token $1;
        set $apex_reply $2;

        content_by_lua_block {
			local apex_tokens = ngx.shared.apex_tokens
			local status, error = apex_tokens:set(ngx.var.apex_token, ngx.var.apex_reply, 600)
            if status then
                ngx.status=200
                ngx.exit(ngx.OK)
            else
                ngx.status=404
                ngx.say(error)
                ngx.exit(ngx.ERROR)
            end
        }
    }

    location ~ ^/.del-well-known/acme-challenge/(.*) {
        default_type text/plain;
        set $apex_token $1;

        content_by_lua_block {
			local apex_tokens = ngx.shared.apex_tokens
			apex_tokens:delete(ngx.var.apex_token)
            ngx.status=200
            ngx.exit(ngx.OK)
        }
    }

    location ~ (.*) {
        rewrite ^ $scheme://www.$http_host$request_uri permanent;
    }
}
