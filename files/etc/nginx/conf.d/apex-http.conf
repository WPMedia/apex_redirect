log_format hostname_only $http_host;

lua_shared_dict acme_tokens 1m;
lua_shared_dict acme_certs 10m;

init_by_lua_block {
    is_my_peer = function(domain, address)
        -- Create DNS Resolver using Google
        --
        local resolver = require "resty.dns.resolver"
        local r, err = resolver:new{
            nameservers = {"8.8.8.8", {"8.8.4.4"} },
            retrans = 5,     -- 5 retransmissions on receive timeout
            timeout = 2000,  -- 2 sec
        }

        if not r then
            ngx.header['X-Auth'] = "Failed to instantiate the resolver: " .. err
            return ngx.HTTP_FORBIDDEN
        end


        -- Query for A records based on the Host header
        --
        local ans, err = r:query(domain, { qtype = r.TYPE_A })
        if not ans then
            ngx.header['X-Auth'] = "Lookup Failed" .. err
            return ngx.HTTP_FORBIDDEN
        end

        -- If remote_addr is listed in DNS then its valid
        --
        for i, data in ipairs(ans) do
            if data.address == address then
                ngx.header['X-Auth'] = "DNS Matched " .. address
                return ngx.OK
            end
        end

        ngx.header['X-Auth'] = "Failed"
        return ngx.HTTP_FORBIDDEN
    end
}


# This is a default TLS listener in order to learn the hostname to add to the auto list
#
server {
    listen      443 ssl default_server;
    access_log  /tmp/http.log  hostname_only;

    # Fallback key/cert if lua cannot find a valid pair
    #
    ssl_certificate /etc/nginx/cert.pem;
    ssl_certificate_key /etc/nginx/key.pem;

    # Use LUA to find the Key/CertChain for this site
    #
    ssl_certificate_by_lua_block {
        local ssl = require "ngx.ssl"

        -- Fetch cert from shared mem
        --
        local acme_certs = ngx.shared.acme_certs
        local fullchain = acme_certs:get(ssl.server_name() .. ":fullchain")
        local privkey = acme_certs:get(ssl.server_name() .. ":privkey")

        if (fullchain == nil or privkey == nil) then
            return
        end

        -- convert pem keys to der
        --
        local der_cert_chain, err = ssl.cert_pem_to_der(fullchain)
        if not der_cert_chain then
            ngx.log(ngx.ERR, "failed to convert certificate chain ", "from PEM to DER: ", err)
            return ngx.exit(ngx.ERROR)
        end

        local der_pkey, err = ssl.priv_key_pem_to_der(privkey)
        if not der_pkey then
            ngx.log(ngx.ERR, "failed to convert private key ", "from PEM to DER: ", err)
            return ngx.exit(ngx.ERROR)
        end

        -- Put keys in place
        --
        local ok, err = ssl.set_der_cert(der_cert_chain)
        if not ok then
            ngx.log(ngx.ERR, "failed to set DER cert: ", err)
            return ngx.exit(ngx.ERROR)
        end

        local ok, err = ssl.set_der_priv_key(der_pkey)
        if not ok then
            ngx.log(ngx.ERR, "failed to set DER private key: ", err)
            return ngx.exit(ngx.ERROR)
        end
    }

    location ~ (.*) {
        rewrite ^ $scheme://www.$host$request_uri permanent;
    }
}

server {
    listen      80 default_server;
    access_log  /tmp/https.log  hostname_only;
    default_type text/plain;

    # Allow setting of acme-challenge
    # Stored in shared as Host:Token = Reply with a 10 minute timeout
    #
    location ~ ^/.well-known/acme-challenge/(.+)/(.+) {
        access_log  /var/log/nginx/access.log  main;
        error_log  /var/log/nginx/error.log  error;

        set $acme_token $host:$1;
        set $acme_reply $2;

        # Only allow known servers to set acme-challenge
        # 
        access_by_lua_block {
            ngx.exit(is_my_peer(ngx.var.host, ngx.var.remote_addr))
        }

        content_by_lua_block {
			local acme_tokens = ngx.shared.acme_tokens
			local status, error = acme_tokens:set(ngx.var.acme_token, ngx.var.acme_reply, 600)
            if status then
                ngx.status=200
                ngx.exit(ngx.OK)
            else
                ngx.status=404
                ngx.say(error)
                ngx.exit(ngx.OK)
            end
        }
    }

    # Fetch challenge from Shared based on Host:Challenge
    #
    location ~ ^/.well-known/acme-challenge/([^/]+)$ {
        access_log  /var/log/nginx/access.log  main;
        error_log  /var/log/nginx/error.log  error;

        set $acme_token $host:$1;

        content_by_lua_block {
			local acme_tokens = ngx.shared.acme_tokens
            local reply = acme_tokens:get(ngx.var.acme_token)
            if (reply == nil or reply == '') then
                ngx.status=404
                ngx.exit(ngx.OK)
            else
                ngx.status=200
                ngx.say(reply)
                ngx.exit(ngx.OK)
            end
        }
    }

    # Store/Fetch the ACME certificate files 
    # Can only be done by servers who have the DNS entry pointing to them
    #
    location ~ ^/.well-known/acme-(cert|chain|fullchain|privkey)$ {
        set $acme_domain $host;
        set $acme_type $1;

        # Only allow known servers to set acme-certs
        # 
        access_by_lua_block {
            ngx.exit(is_my_peer(ngx.var.acme_domain, ngx.var.remote_addr))
        }

        content_by_lua_block {
            local acme_certs = ngx.shared.acme_certs

            -- If method is POST, then read the body with a Continue
            --
            if (ngx.var.request_method == "POST") then
                ngx.req.read_body()
                data = ngx.req.get_body_data()
                acme_certs:set(ngx.var.acme_domain .. ":" .. ngx.var.acme_type, data)
                ngx.status=200
                ngx.exit(ngx.status)

            -- Otherwise we are handling a GET
            --
            else
                cert = acme_certs:get(ngx.var.acme_domain .. ":" .. ngx.var.acme_type)
                if cert == nil then
                    ngx.status=404
                    ngx.exit(ngx.status)

                else
                    ngx.status=200
                    ngx.say(cert)
                    ngx.exit(ngx.status)
                end

            end
        }
    }

    location ~ (.*) {
        rewrite ^ $scheme://www.$http_host$request_uri permanent;
    }
}
