log_format name $http_host;

lua_shared_dict acme_tokens 1m;

server {
    listen      443 ssl default_server;
    access_log  /tmp/http.log  name;

    ssl_certificate /etc/nginx/cert.pem;
    ssl_certificate_key /etc/nginx/key.pem;

    location ~ (.*) {
        rewrite ^ $scheme://www.$host$request_uri permanent;
    }
}

server {
    listen      80 default_server;
    access_log  /tmp/http.log  name;
    default_type text/plain;

    location ~ ^/.well-known/acme-challenge/([^/]+)$ {
        set $acme_token $1;

        content_by_lua_block {
			local acme_tokens = ngx.shared.acme_tokens
            local reply = acme_tokens:get(ngx.var.acme_token)
            if (reply == nil or reply == '') then
                ngx.status=404
                ngx.exit(ngx.OK)
            else
                ngx.status=200
                ngx.say(reply)
                ngx.exit(ngx.OK)
            end
        }
    }

    location ~ ^/.well-known/acme-challenge/(.+)/(.+) {
        set $acme_token $1;
        set $acme_reply $2;

        content_by_lua_block {
			local acme_tokens = ngx.shared.acme_tokens
			local status, error = acme_tokens:set(ngx.var.acme_token, ngx.var.acme_reply, 600)
            if status then
                ngx.status=200
                ngx.exit(ngx.OK)
            else
                ngx.status=404
                ngx.say(error)
                ngx.exit(ngx.OK)
            end
        }
    }

    location ~ ^/.well-known/acme-cert/(.*) {
        set $acme_domain $1;
        add_header X-LUA $acme_domain;

        content_by_lua_block {
            require "lfs"

            if (ngx.var.request_method == "POST") then
                ngx.req.read_body()
                data = ngx.req.get_body_data()
            else
                data = ngx.var.query_string
            end

            lfs.mkdir("/etc/letsencrypt/live/" .. ngx.var.acme_domain)
            fh, ferr = io.open("/etc/letsencrypt/live/" .. ngx.var.acme_domain .. "/fullchain.pem", "w")

            if (fh == nil) then
                ngx.status=404
                ngx.say("Failed opening file " .. ferr)
                ngx.exit(ngx.OK)
            else
                fh:write(data)
                fh:close()
                ngx.status=200
		        ngx.say(data)
                ngx.exit(ngx.OK)
            end
        }
    }

    location ~ (.*) {
        rewrite ^ $scheme://www.$http_host$request_uri permanent;
    }
}
